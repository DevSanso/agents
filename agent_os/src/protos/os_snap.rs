// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `os_snap.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:agent.os.Data)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Data {
    // message fields
    // @@protoc_insertion_point(field:agent.os.Data.format)
    pub format: ::protobuf::EnumOrUnknown<DataFormat>,
    // @@protoc_insertion_point(field:agent.os.Data.raw_data)
    pub raw_data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:agent.os.Data.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Data {
    fn default() -> &'a Data {
        <Data as ::protobuf::Message>::default_instance()
    }
}

impl Data {
    pub fn new() -> Data {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "format",
            |m: &Data| { &m.format },
            |m: &mut Data| { &mut m.format },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "raw_data",
            |m: &Data| { &m.raw_data },
            |m: &mut Data| { &mut m.raw_data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Data>(
            "Data",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Data {
    const NAME: &'static str = "Data";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.format = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.raw_data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.format != ::protobuf::EnumOrUnknown::new(DataFormat::NetArp) {
            my_size += ::protobuf::rt::int32_size(1, self.format.value());
        }
        if !self.raw_data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.raw_data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.format != ::protobuf::EnumOrUnknown::new(DataFormat::NetArp) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.format))?;
        }
        if !self.raw_data.is_empty() {
            os.write_bytes(2, &self.raw_data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Data {
        Data::new()
    }

    fn clear(&mut self) {
        self.format = ::protobuf::EnumOrUnknown::new(DataFormat::NetArp);
        self.raw_data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Data {
        static instance: Data = Data {
            format: ::protobuf::EnumOrUnknown::from_i32(0),
            raw_data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Data {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Data").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Data {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Data {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:agent.os.AgentOsSnap)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct AgentOsSnap {
    // message fields
    // @@protoc_insertion_point(field:agent.os.AgentOsSnap.unix_epoch)
    pub unix_epoch: u64,
    // @@protoc_insertion_point(field:agent.os.AgentOsSnap.datas)
    pub datas: ::std::vec::Vec<Data>,
    // special fields
    // @@protoc_insertion_point(special_field:agent.os.AgentOsSnap.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AgentOsSnap {
    fn default() -> &'a AgentOsSnap {
        <AgentOsSnap as ::protobuf::Message>::default_instance()
    }
}

impl AgentOsSnap {
    pub fn new() -> AgentOsSnap {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "unix_epoch",
            |m: &AgentOsSnap| { &m.unix_epoch },
            |m: &mut AgentOsSnap| { &mut m.unix_epoch },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "datas",
            |m: &AgentOsSnap| { &m.datas },
            |m: &mut AgentOsSnap| { &mut m.datas },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AgentOsSnap>(
            "AgentOsSnap",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AgentOsSnap {
    const NAME: &'static str = "AgentOsSnap";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.unix_epoch = is.read_uint64()?;
                },
                18 => {
                    self.datas.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.unix_epoch != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.unix_epoch);
        }
        for value in &self.datas {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.unix_epoch != 0 {
            os.write_uint64(1, self.unix_epoch)?;
        }
        for v in &self.datas {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AgentOsSnap {
        AgentOsSnap::new()
    }

    fn clear(&mut self) {
        self.unix_epoch = 0;
        self.datas.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AgentOsSnap {
        static instance: AgentOsSnap = AgentOsSnap {
            unix_epoch: 0,
            datas: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for AgentOsSnap {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AgentOsSnap").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AgentOsSnap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AgentOsSnap {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:agent.os.DataFormat)
pub enum DataFormat {
    // @@protoc_insertion_point(enum_value:agent.os.DataFormat.NetArp)
    NetArp = 0,
    // @@protoc_insertion_point(enum_value:agent.os.DataFormat.NetDev)
    NetDev = 1,
    // @@protoc_insertion_point(enum_value:agent.os.DataFormat.NetSockStat)
    NetSockStat = 2,
    // @@protoc_insertion_point(enum_value:agent.os.DataFormat.NetTcp4Stat)
    NetTcp4Stat = 3,
}

impl ::protobuf::Enum for DataFormat {
    const NAME: &'static str = "DataFormat";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<DataFormat> {
        match value {
            0 => ::std::option::Option::Some(DataFormat::NetArp),
            1 => ::std::option::Option::Some(DataFormat::NetDev),
            2 => ::std::option::Option::Some(DataFormat::NetSockStat),
            3 => ::std::option::Option::Some(DataFormat::NetTcp4Stat),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<DataFormat> {
        match str {
            "NetArp" => ::std::option::Option::Some(DataFormat::NetArp),
            "NetDev" => ::std::option::Option::Some(DataFormat::NetDev),
            "NetSockStat" => ::std::option::Option::Some(DataFormat::NetSockStat),
            "NetTcp4Stat" => ::std::option::Option::Some(DataFormat::NetTcp4Stat),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [DataFormat] = &[
        DataFormat::NetArp,
        DataFormat::NetDev,
        DataFormat::NetSockStat,
        DataFormat::NetTcp4Stat,
    ];
}

impl ::protobuf::EnumFull for DataFormat {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("DataFormat").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for DataFormat {
    fn default() -> Self {
        DataFormat::NetArp
    }
}

impl DataFormat {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<DataFormat>("DataFormat")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\ros_snap.proto\x12\x08agent.os\"O\n\x04Data\x12,\n\x06format\x18\x01\
    \x20\x01(\x0e2\x14.agent.os.DataFormatR\x06format\x12\x19\n\x08raw_data\
    \x18\x02\x20\x01(\x0cR\x07rawData\"R\n\x0bAgentOsSnap\x12\x1d\n\nunix_ep\
    och\x18\x01\x20\x01(\x04R\tunixEpoch\x12$\n\x05datas\x18\x02\x20\x03(\
    \x0b2\x0e.agent.os.DataR\x05datas*F\n\nDataFormat\x12\n\n\x06NetArp\x10\
    \0\x12\n\n\x06NetDev\x10\x01\x12\x0f\n\x0bNetSockStat\x10\x02\x12\x0f\n\
    \x0bNetTcp4Stat\x10\x03B#\xaa\x02\x20InfoGatherHub.HubProtos.Agent.Osb\
    \x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Data::generated_message_descriptor_data());
            messages.push(AgentOsSnap::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(DataFormat::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
