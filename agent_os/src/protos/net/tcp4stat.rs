// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `tcp4stat.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:net.Tcp4Stat)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Tcp4Stat {
    // message fields
    // @@protoc_insertion_point(field:net.Tcp4Stat.local_addr_hex)
    pub local_addr_hex: ::std::string::String,
    // @@protoc_insertion_point(field:net.Tcp4Stat.remote_addr_hex)
    pub remote_addr_hex: ::std::string::String,
    // @@protoc_insertion_point(field:net.Tcp4Stat.connection_state)
    pub connection_state: u32,
    // @@protoc_insertion_point(field:net.Tcp4Stat.tx_queue)
    pub tx_queue: u64,
    // @@protoc_insertion_point(field:net.Tcp4Stat.rx_queue)
    pub rx_queue: u64,
    // @@protoc_insertion_point(field:net.Tcp4Stat.time_active)
    pub time_active: u32,
    // @@protoc_insertion_point(field:net.Tcp4Stat.jiffies_timer_expires)
    pub jiffies_timer_expires: u64,
    // @@protoc_insertion_point(field:net.Tcp4Stat.rto)
    pub rto: u64,
    // @@protoc_insertion_point(field:net.Tcp4Stat.uid)
    pub uid: u32,
    // @@protoc_insertion_point(field:net.Tcp4Stat.zero_window_probes)
    pub zero_window_probes: u32,
    // @@protoc_insertion_point(field:net.Tcp4Stat.inode)
    pub inode: u64,
    // @@protoc_insertion_point(field:net.Tcp4Stat.etc)
    pub etc: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:net.Tcp4Stat.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Tcp4Stat {
    fn default() -> &'a Tcp4Stat {
        <Tcp4Stat as ::protobuf::Message>::default_instance()
    }
}

impl Tcp4Stat {
    pub fn new() -> Tcp4Stat {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(12);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "local_addr_hex",
            |m: &Tcp4Stat| { &m.local_addr_hex },
            |m: &mut Tcp4Stat| { &mut m.local_addr_hex },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "remote_addr_hex",
            |m: &Tcp4Stat| { &m.remote_addr_hex },
            |m: &mut Tcp4Stat| { &mut m.remote_addr_hex },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "connection_state",
            |m: &Tcp4Stat| { &m.connection_state },
            |m: &mut Tcp4Stat| { &mut m.connection_state },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_queue",
            |m: &Tcp4Stat| { &m.tx_queue },
            |m: &mut Tcp4Stat| { &mut m.tx_queue },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rx_queue",
            |m: &Tcp4Stat| { &m.rx_queue },
            |m: &mut Tcp4Stat| { &mut m.rx_queue },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time_active",
            |m: &Tcp4Stat| { &m.time_active },
            |m: &mut Tcp4Stat| { &mut m.time_active },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "jiffies_timer_expires",
            |m: &Tcp4Stat| { &m.jiffies_timer_expires },
            |m: &mut Tcp4Stat| { &mut m.jiffies_timer_expires },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rto",
            |m: &Tcp4Stat| { &m.rto },
            |m: &mut Tcp4Stat| { &mut m.rto },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "uid",
            |m: &Tcp4Stat| { &m.uid },
            |m: &mut Tcp4Stat| { &mut m.uid },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "zero_window_probes",
            |m: &Tcp4Stat| { &m.zero_window_probes },
            |m: &mut Tcp4Stat| { &mut m.zero_window_probes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "inode",
            |m: &Tcp4Stat| { &m.inode },
            |m: &mut Tcp4Stat| { &mut m.inode },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "etc",
            |m: &Tcp4Stat| { &m.etc },
            |m: &mut Tcp4Stat| { &mut m.etc },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Tcp4Stat>(
            "Tcp4Stat",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Tcp4Stat {
    const NAME: &'static str = "Tcp4Stat";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.local_addr_hex = is.read_string()?;
                },
                18 => {
                    self.remote_addr_hex = is.read_string()?;
                },
                24 => {
                    self.connection_state = is.read_uint32()?;
                },
                32 => {
                    self.tx_queue = is.read_uint64()?;
                },
                40 => {
                    self.rx_queue = is.read_uint64()?;
                },
                48 => {
                    self.time_active = is.read_uint32()?;
                },
                56 => {
                    self.jiffies_timer_expires = is.read_uint64()?;
                },
                64 => {
                    self.rto = is.read_uint64()?;
                },
                72 => {
                    self.uid = is.read_uint32()?;
                },
                80 => {
                    self.zero_window_probes = is.read_uint32()?;
                },
                88 => {
                    self.inode = is.read_uint64()?;
                },
                98 => {
                    self.etc = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.local_addr_hex.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.local_addr_hex);
        }
        if !self.remote_addr_hex.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.remote_addr_hex);
        }
        if self.connection_state != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.connection_state);
        }
        if self.tx_queue != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.tx_queue);
        }
        if self.rx_queue != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.rx_queue);
        }
        if self.time_active != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.time_active);
        }
        if self.jiffies_timer_expires != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.jiffies_timer_expires);
        }
        if self.rto != 0 {
            my_size += ::protobuf::rt::uint64_size(8, self.rto);
        }
        if self.uid != 0 {
            my_size += ::protobuf::rt::uint32_size(9, self.uid);
        }
        if self.zero_window_probes != 0 {
            my_size += ::protobuf::rt::uint32_size(10, self.zero_window_probes);
        }
        if self.inode != 0 {
            my_size += ::protobuf::rt::uint64_size(11, self.inode);
        }
        if !self.etc.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.etc);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.local_addr_hex.is_empty() {
            os.write_string(1, &self.local_addr_hex)?;
        }
        if !self.remote_addr_hex.is_empty() {
            os.write_string(2, &self.remote_addr_hex)?;
        }
        if self.connection_state != 0 {
            os.write_uint32(3, self.connection_state)?;
        }
        if self.tx_queue != 0 {
            os.write_uint64(4, self.tx_queue)?;
        }
        if self.rx_queue != 0 {
            os.write_uint64(5, self.rx_queue)?;
        }
        if self.time_active != 0 {
            os.write_uint32(6, self.time_active)?;
        }
        if self.jiffies_timer_expires != 0 {
            os.write_uint64(7, self.jiffies_timer_expires)?;
        }
        if self.rto != 0 {
            os.write_uint64(8, self.rto)?;
        }
        if self.uid != 0 {
            os.write_uint32(9, self.uid)?;
        }
        if self.zero_window_probes != 0 {
            os.write_uint32(10, self.zero_window_probes)?;
        }
        if self.inode != 0 {
            os.write_uint64(11, self.inode)?;
        }
        if !self.etc.is_empty() {
            os.write_string(12, &self.etc)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Tcp4Stat {
        Tcp4Stat::new()
    }

    fn clear(&mut self) {
        self.local_addr_hex.clear();
        self.remote_addr_hex.clear();
        self.connection_state = 0;
        self.tx_queue = 0;
        self.rx_queue = 0;
        self.time_active = 0;
        self.jiffies_timer_expires = 0;
        self.rto = 0;
        self.uid = 0;
        self.zero_window_probes = 0;
        self.inode = 0;
        self.etc.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Tcp4Stat {
        static instance: Tcp4Stat = Tcp4Stat {
            local_addr_hex: ::std::string::String::new(),
            remote_addr_hex: ::std::string::String::new(),
            connection_state: 0,
            tx_queue: 0,
            rx_queue: 0,
            time_active: 0,
            jiffies_timer_expires: 0,
            rto: 0,
            uid: 0,
            zero_window_probes: 0,
            inode: 0,
            etc: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Tcp4Stat {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Tcp4Stat").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Tcp4Stat {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Tcp4Stat {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:net.Tcp4Stats)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Tcp4Stats {
    // message fields
    // @@protoc_insertion_point(field:net.Tcp4Stats.stats)
    pub stats: ::std::vec::Vec<Tcp4Stat>,
    // special fields
    // @@protoc_insertion_point(special_field:net.Tcp4Stats.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Tcp4Stats {
    fn default() -> &'a Tcp4Stats {
        <Tcp4Stats as ::protobuf::Message>::default_instance()
    }
}

impl Tcp4Stats {
    pub fn new() -> Tcp4Stats {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "stats",
            |m: &Tcp4Stats| { &m.stats },
            |m: &mut Tcp4Stats| { &mut m.stats },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Tcp4Stats>(
            "Tcp4Stats",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Tcp4Stats {
    const NAME: &'static str = "Tcp4Stats";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.stats.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.stats {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.stats {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Tcp4Stats {
        Tcp4Stats::new()
    }

    fn clear(&mut self) {
        self.stats.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Tcp4Stats {
        static instance: Tcp4Stats = Tcp4Stats {
            stats: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Tcp4Stats {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Tcp4Stats").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Tcp4Stats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Tcp4Stats {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0etcp4stat.proto\x12\x03net\"\x88\x03\n\x08Tcp4Stat\x12$\n\x0elocal_\
    addr_hex\x18\x01\x20\x01(\tR\x0clocalAddrHex\x12&\n\x0fremote_addr_hex\
    \x18\x02\x20\x01(\tR\rremoteAddrHex\x12)\n\x10connection_state\x18\x03\
    \x20\x01(\rR\x0fconnectionState\x12\x19\n\x08tx_queue\x18\x04\x20\x01(\
    \x04R\x07txQueue\x12\x19\n\x08rx_queue\x18\x05\x20\x01(\x04R\x07rxQueue\
    \x12\x1f\n\x0btime_active\x18\x06\x20\x01(\rR\ntimeActive\x122\n\x15jiff\
    ies_timer_expires\x18\x07\x20\x01(\x04R\x13jiffiesTimerExpires\x12\x10\n\
    \x03rto\x18\x08\x20\x01(\x04R\x03rto\x12\x10\n\x03uid\x18\t\x20\x01(\rR\
    \x03uid\x12,\n\x12zero_window_probes\x18\n\x20\x01(\rR\x10zeroWindowProb\
    es\x12\x14\n\x05inode\x18\x0b\x20\x01(\x04R\x05inode\x12\x10\n\x03etc\
    \x18\x0c\x20\x01(\tR\x03etc\"0\n\tTcp4Stats\x12#\n\x05stats\x18\x01\x20\
    \x03(\x0b2\r.net.Tcp4StatR\x05statsb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Tcp4Stat::generated_message_descriptor_data());
            messages.push(Tcp4Stats::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
