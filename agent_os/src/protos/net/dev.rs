// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.12.4
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `dev.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:net.NetDevInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct NetDevInfo {
    // message fields
    // @@protoc_insertion_point(field:net.NetDevInfo.interface)
    pub interface: ::std::string::String,
    // @@protoc_insertion_point(field:net.NetDevInfo.rx_bytes)
    pub rx_bytes: u64,
    // @@protoc_insertion_point(field:net.NetDevInfo.rx_packets)
    pub rx_packets: u64,
    // @@protoc_insertion_point(field:net.NetDevInfo.rx_errs)
    pub rx_errs: u64,
    // @@protoc_insertion_point(field:net.NetDevInfo.rx_drop)
    pub rx_drop: u64,
    // @@protoc_insertion_point(field:net.NetDevInfo.rx_fifo)
    pub rx_fifo: u64,
    // @@protoc_insertion_point(field:net.NetDevInfo.rx_frame)
    pub rx_frame: u64,
    // @@protoc_insertion_point(field:net.NetDevInfo.rx_compressed)
    pub rx_compressed: u64,
    // @@protoc_insertion_point(field:net.NetDevInfo.tx_bytes)
    pub tx_bytes: u64,
    // @@protoc_insertion_point(field:net.NetDevInfo.tx_packets)
    pub tx_packets: u64,
    // @@protoc_insertion_point(field:net.NetDevInfo.tx_errs)
    pub tx_errs: u64,
    // @@protoc_insertion_point(field:net.NetDevInfo.tx_drop)
    pub tx_drop: u64,
    // @@protoc_insertion_point(field:net.NetDevInfo.tx_fifo)
    pub tx_fifo: u64,
    // @@protoc_insertion_point(field:net.NetDevInfo.tx_frame)
    pub tx_frame: u64,
    // @@protoc_insertion_point(field:net.NetDevInfo.tx_compressed)
    pub tx_compressed: u64,
    // special fields
    // @@protoc_insertion_point(special_field:net.NetDevInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NetDevInfo {
    fn default() -> &'a NetDevInfo {
        <NetDevInfo as ::protobuf::Message>::default_instance()
    }
}

impl NetDevInfo {
    pub fn new() -> NetDevInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "interface",
            |m: &NetDevInfo| { &m.interface },
            |m: &mut NetDevInfo| { &mut m.interface },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rx_bytes",
            |m: &NetDevInfo| { &m.rx_bytes },
            |m: &mut NetDevInfo| { &mut m.rx_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rx_packets",
            |m: &NetDevInfo| { &m.rx_packets },
            |m: &mut NetDevInfo| { &mut m.rx_packets },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rx_errs",
            |m: &NetDevInfo| { &m.rx_errs },
            |m: &mut NetDevInfo| { &mut m.rx_errs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rx_drop",
            |m: &NetDevInfo| { &m.rx_drop },
            |m: &mut NetDevInfo| { &mut m.rx_drop },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rx_fifo",
            |m: &NetDevInfo| { &m.rx_fifo },
            |m: &mut NetDevInfo| { &mut m.rx_fifo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rx_frame",
            |m: &NetDevInfo| { &m.rx_frame },
            |m: &mut NetDevInfo| { &mut m.rx_frame },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rx_compressed",
            |m: &NetDevInfo| { &m.rx_compressed },
            |m: &mut NetDevInfo| { &mut m.rx_compressed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_bytes",
            |m: &NetDevInfo| { &m.tx_bytes },
            |m: &mut NetDevInfo| { &mut m.tx_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_packets",
            |m: &NetDevInfo| { &m.tx_packets },
            |m: &mut NetDevInfo| { &mut m.tx_packets },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_errs",
            |m: &NetDevInfo| { &m.tx_errs },
            |m: &mut NetDevInfo| { &mut m.tx_errs },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_drop",
            |m: &NetDevInfo| { &m.tx_drop },
            |m: &mut NetDevInfo| { &mut m.tx_drop },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_fifo",
            |m: &NetDevInfo| { &m.tx_fifo },
            |m: &mut NetDevInfo| { &mut m.tx_fifo },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_frame",
            |m: &NetDevInfo| { &m.tx_frame },
            |m: &mut NetDevInfo| { &mut m.tx_frame },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_compressed",
            |m: &NetDevInfo| { &m.tx_compressed },
            |m: &mut NetDevInfo| { &mut m.tx_compressed },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NetDevInfo>(
            "NetDevInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NetDevInfo {
    const NAME: &'static str = "NetDevInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.interface = is.read_string()?;
                },
                16 => {
                    self.rx_bytes = is.read_uint64()?;
                },
                24 => {
                    self.rx_packets = is.read_uint64()?;
                },
                32 => {
                    self.rx_errs = is.read_uint64()?;
                },
                40 => {
                    self.rx_drop = is.read_uint64()?;
                },
                48 => {
                    self.rx_fifo = is.read_uint64()?;
                },
                56 => {
                    self.rx_frame = is.read_uint64()?;
                },
                64 => {
                    self.rx_compressed = is.read_uint64()?;
                },
                72 => {
                    self.tx_bytes = is.read_uint64()?;
                },
                80 => {
                    self.tx_packets = is.read_uint64()?;
                },
                88 => {
                    self.tx_errs = is.read_uint64()?;
                },
                96 => {
                    self.tx_drop = is.read_uint64()?;
                },
                104 => {
                    self.tx_fifo = is.read_uint64()?;
                },
                112 => {
                    self.tx_frame = is.read_uint64()?;
                },
                120 => {
                    self.tx_compressed = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.interface.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.interface);
        }
        if self.rx_bytes != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.rx_bytes);
        }
        if self.rx_packets != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.rx_packets);
        }
        if self.rx_errs != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.rx_errs);
        }
        if self.rx_drop != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.rx_drop);
        }
        if self.rx_fifo != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.rx_fifo);
        }
        if self.rx_frame != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.rx_frame);
        }
        if self.rx_compressed != 0 {
            my_size += ::protobuf::rt::uint64_size(8, self.rx_compressed);
        }
        if self.tx_bytes != 0 {
            my_size += ::protobuf::rt::uint64_size(9, self.tx_bytes);
        }
        if self.tx_packets != 0 {
            my_size += ::protobuf::rt::uint64_size(10, self.tx_packets);
        }
        if self.tx_errs != 0 {
            my_size += ::protobuf::rt::uint64_size(11, self.tx_errs);
        }
        if self.tx_drop != 0 {
            my_size += ::protobuf::rt::uint64_size(12, self.tx_drop);
        }
        if self.tx_fifo != 0 {
            my_size += ::protobuf::rt::uint64_size(13, self.tx_fifo);
        }
        if self.tx_frame != 0 {
            my_size += ::protobuf::rt::uint64_size(14, self.tx_frame);
        }
        if self.tx_compressed != 0 {
            my_size += ::protobuf::rt::uint64_size(15, self.tx_compressed);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.interface.is_empty() {
            os.write_string(1, &self.interface)?;
        }
        if self.rx_bytes != 0 {
            os.write_uint64(2, self.rx_bytes)?;
        }
        if self.rx_packets != 0 {
            os.write_uint64(3, self.rx_packets)?;
        }
        if self.rx_errs != 0 {
            os.write_uint64(4, self.rx_errs)?;
        }
        if self.rx_drop != 0 {
            os.write_uint64(5, self.rx_drop)?;
        }
        if self.rx_fifo != 0 {
            os.write_uint64(6, self.rx_fifo)?;
        }
        if self.rx_frame != 0 {
            os.write_uint64(7, self.rx_frame)?;
        }
        if self.rx_compressed != 0 {
            os.write_uint64(8, self.rx_compressed)?;
        }
        if self.tx_bytes != 0 {
            os.write_uint64(9, self.tx_bytes)?;
        }
        if self.tx_packets != 0 {
            os.write_uint64(10, self.tx_packets)?;
        }
        if self.tx_errs != 0 {
            os.write_uint64(11, self.tx_errs)?;
        }
        if self.tx_drop != 0 {
            os.write_uint64(12, self.tx_drop)?;
        }
        if self.tx_fifo != 0 {
            os.write_uint64(13, self.tx_fifo)?;
        }
        if self.tx_frame != 0 {
            os.write_uint64(14, self.tx_frame)?;
        }
        if self.tx_compressed != 0 {
            os.write_uint64(15, self.tx_compressed)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NetDevInfo {
        NetDevInfo::new()
    }

    fn clear(&mut self) {
        self.interface.clear();
        self.rx_bytes = 0;
        self.rx_packets = 0;
        self.rx_errs = 0;
        self.rx_drop = 0;
        self.rx_fifo = 0;
        self.rx_frame = 0;
        self.rx_compressed = 0;
        self.tx_bytes = 0;
        self.tx_packets = 0;
        self.tx_errs = 0;
        self.tx_drop = 0;
        self.tx_fifo = 0;
        self.tx_frame = 0;
        self.tx_compressed = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NetDevInfo {
        static instance: NetDevInfo = NetDevInfo {
            interface: ::std::string::String::new(),
            rx_bytes: 0,
            rx_packets: 0,
            rx_errs: 0,
            rx_drop: 0,
            rx_fifo: 0,
            rx_frame: 0,
            rx_compressed: 0,
            tx_bytes: 0,
            tx_packets: 0,
            tx_errs: 0,
            tx_drop: 0,
            tx_fifo: 0,
            tx_frame: 0,
            tx_compressed: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NetDevInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NetDevInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NetDevInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NetDevInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:net.NetDevInfos)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct NetDevInfos {
    // message fields
    // @@protoc_insertion_point(field:net.NetDevInfos.infos)
    pub infos: ::std::vec::Vec<NetDevInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:net.NetDevInfos.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a NetDevInfos {
    fn default() -> &'a NetDevInfos {
        <NetDevInfos as ::protobuf::Message>::default_instance()
    }
}

impl NetDevInfos {
    pub fn new() -> NetDevInfos {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "infos",
            |m: &NetDevInfos| { &m.infos },
            |m: &mut NetDevInfos| { &mut m.infos },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<NetDevInfos>(
            "NetDevInfos",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for NetDevInfos {
    const NAME: &'static str = "NetDevInfos";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.infos.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.infos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.infos {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> NetDevInfos {
        NetDevInfos::new()
    }

    fn clear(&mut self) {
        self.infos.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static NetDevInfos {
        static instance: NetDevInfos = NetDevInfos {
            infos: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for NetDevInfos {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("NetDevInfos").unwrap()).clone()
    }
}

impl ::std::fmt::Display for NetDevInfos {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NetDevInfos {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\tdev.proto\x12\x03net\"\xb4\x03\n\nNetDevInfo\x12\x1c\n\tinterface\
    \x18\x01\x20\x01(\tR\tinterface\x12\x19\n\x08rx_bytes\x18\x02\x20\x01(\
    \x04R\x07rxBytes\x12\x1d\n\nrx_packets\x18\x03\x20\x01(\x04R\trxPackets\
    \x12\x17\n\x07rx_errs\x18\x04\x20\x01(\x04R\x06rxErrs\x12\x17\n\x07rx_dr\
    op\x18\x05\x20\x01(\x04R\x06rxDrop\x12\x17\n\x07rx_fifo\x18\x06\x20\x01(\
    \x04R\x06rxFifo\x12\x19\n\x08rx_frame\x18\x07\x20\x01(\x04R\x07rxFrame\
    \x12#\n\rrx_compressed\x18\x08\x20\x01(\x04R\x0crxCompressed\x12\x19\n\
    \x08tx_bytes\x18\t\x20\x01(\x04R\x07txBytes\x12\x1d\n\ntx_packets\x18\n\
    \x20\x01(\x04R\ttxPackets\x12\x17\n\x07tx_errs\x18\x0b\x20\x01(\x04R\x06\
    txErrs\x12\x17\n\x07tx_drop\x18\x0c\x20\x01(\x04R\x06txDrop\x12\x17\n\
    \x07tx_fifo\x18\r\x20\x01(\x04R\x06txFifo\x12\x19\n\x08tx_frame\x18\x0e\
    \x20\x01(\x04R\x07txFrame\x12#\n\rtx_compressed\x18\x0f\x20\x01(\x04R\
    \x0ctxCompressed\"4\n\x0bNetDevInfos\x12%\n\x05infos\x18\x01\x20\x03(\
    \x0b2\x0f.net.NetDevInfoR\x05infosb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(NetDevInfo::generated_message_descriptor_data());
            messages.push(NetDevInfos::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
