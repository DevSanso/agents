create table redis.redis_memory (
    target_id int,
    collection_time timestamp,
    used_memory int8,
    used_memory_human varchar(255),
    used_memory_rss int8,
    used_memory_rss_human varchar(255),
    used_memory_peak int8,
    used_memory_peak_human varchar(255),
    used_memory_peak_perc varchar(255),
    used_memory_overhead int8,
    used_memory_startup int8,
    used_memory_dataset int8,
    used_memory_dataset_perc varchar(255),
    allocator_allocated int8,
    allocator_active int8,
    allocator_resident int8,
    total_system_memory int8,
    total_system_memory_human varchar(255),
    used_memory_lua int8,
    used_memory_vm_eval int8,
    used_memory_lua_human varchar(255),
    used_memory_scripts_eval int8,
    number_of_cached_scripts int8,
    number_of_functions int8,
    number_of_libraries int8,
    used_memory_vm_functions int8,
    used_memory_vm_total int8,
    used_memory_vm_total_human varchar(255),
    used_memory_functions int8,
    used_memory_scripts int8,
    used_memory_scripts_human varchar(255),
    max_memory int8,
    max_memory_human varchar(255),
    max_memory_policy varchar(255),
    allocator_frag_ratio numeric,
    allocator_frag_bytes int8,
    allocator_rss_ratio numeric,
    allocator_rss_bytes int8,
    rss_overhead_ratio numeric,
    rss_overhead_bytes int8,
    mem_fragmentation_ratio numeric,
    mem_fragmentation_bytes int8,
    mem_not_counted_for_evict int8,
    mem_replication_backlog int8,
    mem_total_replication_buffers int8,
    mem_clients_slaves int8,
    mem_clients_normal int8,
    mem_cluster_links int8,
    mem_aof_buffer int8,
    mem_allocator varchar(255),
    active_defrag_running int8,
    lazy_free_pending_objects int8,
    lazy_freed_objects int8
) partition by range(collection_time);

create index redis_memory_idx on redis.redis_client(target_id, collection_time);