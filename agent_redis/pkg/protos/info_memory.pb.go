// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: info_memory.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RedisMemoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsedMemory                 int64   `protobuf:"varint,1,opt,name=used_memory,json=usedMemory,proto3" json:"used_memory,omitempty"`
	UsedMemoryHuman            string  `protobuf:"bytes,2,opt,name=used_memory_human,json=usedMemoryHuman,proto3" json:"used_memory_human,omitempty"`
	UsedMemoryRss              int64   `protobuf:"varint,3,opt,name=used_memory_rss,json=usedMemoryRss,proto3" json:"used_memory_rss,omitempty"`
	UsedMemoryRssHuman         string  `protobuf:"bytes,4,opt,name=used_memory_rss_human,json=usedMemoryRssHuman,proto3" json:"used_memory_rss_human,omitempty"`
	UsedMemoryPeak             int64   `protobuf:"varint,5,opt,name=used_memory_peak,json=usedMemoryPeak,proto3" json:"used_memory_peak,omitempty"`
	UsedMemoryPeakHuman        string  `protobuf:"bytes,6,opt,name=used_memory_peak_human,json=usedMemoryPeakHuman,proto3" json:"used_memory_peak_human,omitempty"`
	UsedMemoryPeakPerc         string  `protobuf:"bytes,7,opt,name=used_memory_peak_perc,json=usedMemoryPeakPerc,proto3" json:"used_memory_peak_perc,omitempty"`
	UsedMemoryOverhead         int64   `protobuf:"varint,8,opt,name=used_memory_overhead,json=usedMemoryOverhead,proto3" json:"used_memory_overhead,omitempty"`
	UsedMemoryStartup          int64   `protobuf:"varint,9,opt,name=used_memory_startup,json=usedMemoryStartup,proto3" json:"used_memory_startup,omitempty"`
	UsedMemoryDataset          int64   `protobuf:"varint,10,opt,name=used_memory_dataset,json=usedMemoryDataset,proto3" json:"used_memory_dataset,omitempty"`
	UsedMemoryDatasetPerc      string  `protobuf:"bytes,11,opt,name=used_memory_dataset_perc,json=usedMemoryDatasetPerc,proto3" json:"used_memory_dataset_perc,omitempty"`
	AllocatorAllocated         int64   `protobuf:"varint,12,opt,name=allocator_allocated,json=allocatorAllocated,proto3" json:"allocator_allocated,omitempty"`
	AllocatorActive            int64   `protobuf:"varint,13,opt,name=allocator_active,json=allocatorActive,proto3" json:"allocator_active,omitempty"`
	AllocatorResident          int64   `protobuf:"varint,14,opt,name=allocator_resident,json=allocatorResident,proto3" json:"allocator_resident,omitempty"`
	TotalSystemMemory          int64   `protobuf:"varint,15,opt,name=total_system_memory,json=totalSystemMemory,proto3" json:"total_system_memory,omitempty"`
	TotalSystemMemoryHuman     string  `protobuf:"bytes,16,opt,name=total_system_memory_human,json=totalSystemMemoryHuman,proto3" json:"total_system_memory_human,omitempty"`
	UsedMemoryLua              int64   `protobuf:"varint,17,opt,name=used_memory_lua,json=usedMemoryLua,proto3" json:"used_memory_lua,omitempty"`
	UsedMemoryVmEval           int64   `protobuf:"varint,18,opt,name=used_memory_vm_eval,json=usedMemoryVmEval,proto3" json:"used_memory_vm_eval,omitempty"`
	UsedMemoryLuaHuman         string  `protobuf:"bytes,19,opt,name=used_memory_lua_human,json=usedMemoryLuaHuman,proto3" json:"used_memory_lua_human,omitempty"`
	UsedMemoryScriptsEval      int64   `protobuf:"varint,20,opt,name=used_memory_scripts_eval,json=usedMemoryScriptsEval,proto3" json:"used_memory_scripts_eval,omitempty"`
	NumberOfCachedScripts      int64   `protobuf:"varint,21,opt,name=number_of_cached_scripts,json=numberOfCachedScripts,proto3" json:"number_of_cached_scripts,omitempty"`
	NumberOfFunctions          int64   `protobuf:"varint,22,opt,name=number_of_functions,json=numberOfFunctions,proto3" json:"number_of_functions,omitempty"`
	NumberOfLibraries          int64   `protobuf:"varint,23,opt,name=number_of_libraries,json=numberOfLibraries,proto3" json:"number_of_libraries,omitempty"`
	UsedMemoryVmFunctions      int64   `protobuf:"varint,24,opt,name=used_memory_vm_functions,json=usedMemoryVmFunctions,proto3" json:"used_memory_vm_functions,omitempty"`
	UsedMemoryVmTotal          int64   `protobuf:"varint,25,opt,name=used_memory_vm_total,json=usedMemoryVmTotal,proto3" json:"used_memory_vm_total,omitempty"`
	UsedMemoryVmTotalHuman     string  `protobuf:"bytes,26,opt,name=used_memory_vm_total_human,json=usedMemoryVmTotalHuman,proto3" json:"used_memory_vm_total_human,omitempty"`
	UsedMemoryFunctions        int64   `protobuf:"varint,27,opt,name=used_memory_functions,json=usedMemoryFunctions,proto3" json:"used_memory_functions,omitempty"`
	UsedMemoryScripts          int64   `protobuf:"varint,28,opt,name=used_memory_scripts,json=usedMemoryScripts,proto3" json:"used_memory_scripts,omitempty"`
	UsedMemoryScriptsHuman     string  `protobuf:"bytes,29,opt,name=used_memory_scripts_human,json=usedMemoryScriptsHuman,proto3" json:"used_memory_scripts_human,omitempty"`
	MaxMemory                  int64   `protobuf:"varint,30,opt,name=max_memory,json=maxMemory,proto3" json:"max_memory,omitempty"`
	MaxMemoryHuman             string  `protobuf:"bytes,31,opt,name=max_memory_human,json=maxMemoryHuman,proto3" json:"max_memory_human,omitempty"`
	MaxMemoryPolicy            string  `protobuf:"bytes,32,opt,name=max_memory_policy,json=maxMemoryPolicy,proto3" json:"max_memory_policy,omitempty"`
	AllocatorFragRatio         float64 `protobuf:"fixed64,33,opt,name=allocator_frag_ratio,json=allocatorFragRatio,proto3" json:"allocator_frag_ratio,omitempty"`
	AllocatorFragBytes         int64   `protobuf:"varint,34,opt,name=allocator_frag_bytes,json=allocatorFragBytes,proto3" json:"allocator_frag_bytes,omitempty"`
	AllocatorRssRatio          float64 `protobuf:"fixed64,35,opt,name=allocator_rss_ratio,json=allocatorRssRatio,proto3" json:"allocator_rss_ratio,omitempty"`
	AllocatorRssBytes          int64   `protobuf:"varint,36,opt,name=allocator_rss_bytes,json=allocatorRssBytes,proto3" json:"allocator_rss_bytes,omitempty"`
	RssOverheadRatio           float64 `protobuf:"fixed64,37,opt,name=rss_overhead_ratio,json=rssOverheadRatio,proto3" json:"rss_overhead_ratio,omitempty"`
	RssOverheadBytes           int64   `protobuf:"varint,38,opt,name=rss_overhead_bytes,json=rssOverheadBytes,proto3" json:"rss_overhead_bytes,omitempty"`
	MemFragmentationRatio      float64 `protobuf:"fixed64,39,opt,name=mem_fragmentation_ratio,json=memFragmentationRatio,proto3" json:"mem_fragmentation_ratio,omitempty"`
	MemFragmentationBytes      int64   `protobuf:"varint,40,opt,name=mem_fragmentation_bytes,json=memFragmentationBytes,proto3" json:"mem_fragmentation_bytes,omitempty"`
	MemNotCountedForEvict      int64   `protobuf:"varint,41,opt,name=mem_not_counted_for_evict,json=memNotCountedForEvict,proto3" json:"mem_not_counted_for_evict,omitempty"`
	MemReplicationBacklog      int64   `protobuf:"varint,42,opt,name=mem_replication_backlog,json=memReplicationBacklog,proto3" json:"mem_replication_backlog,omitempty"`
	MemTotalReplicationBuffers int64   `protobuf:"varint,43,opt,name=mem_total_replication_buffers,json=memTotalReplicationBuffers,proto3" json:"mem_total_replication_buffers,omitempty"`
	MemClientsSlaves           int64   `protobuf:"varint,44,opt,name=mem_clients_slaves,json=memClientsSlaves,proto3" json:"mem_clients_slaves,omitempty"`
	MemClientsNormal           int64   `protobuf:"varint,45,opt,name=mem_clients_normal,json=memClientsNormal,proto3" json:"mem_clients_normal,omitempty"`
	MemClusterLinks            int64   `protobuf:"varint,46,opt,name=mem_cluster_links,json=memClusterLinks,proto3" json:"mem_cluster_links,omitempty"`
	MemAofBuffer               int64   `protobuf:"varint,47,opt,name=mem_aof_buffer,json=memAofBuffer,proto3" json:"mem_aof_buffer,omitempty"`
	MemAllocator               string  `protobuf:"bytes,48,opt,name=mem_allocator,json=memAllocator,proto3" json:"mem_allocator,omitempty"`
	ActiveDefragRunning        int64   `protobuf:"varint,49,opt,name=active_defrag_running,json=activeDefragRunning,proto3" json:"active_defrag_running,omitempty"`
	LazyFreePendingObjects     int64   `protobuf:"varint,50,opt,name=lazy_free_pending_objects,json=lazyFreePendingObjects,proto3" json:"lazy_free_pending_objects,omitempty"`
	LazyFreedObjects           int64   `protobuf:"varint,51,opt,name=lazy_freed_objects,json=lazyFreedObjects,proto3" json:"lazy_freed_objects,omitempty"`
}

func (x *RedisMemoryInfo) Reset() {
	*x = RedisMemoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_memory_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisMemoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisMemoryInfo) ProtoMessage() {}

func (x *RedisMemoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_memory_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisMemoryInfo.ProtoReflect.Descriptor instead.
func (*RedisMemoryInfo) Descriptor() ([]byte, []int) {
	return file_info_memory_proto_rawDescGZIP(), []int{0}
}

func (x *RedisMemoryInfo) GetUsedMemory() int64 {
	if x != nil {
		return x.UsedMemory
	}
	return 0
}

func (x *RedisMemoryInfo) GetUsedMemoryHuman() string {
	if x != nil {
		return x.UsedMemoryHuman
	}
	return ""
}

func (x *RedisMemoryInfo) GetUsedMemoryRss() int64 {
	if x != nil {
		return x.UsedMemoryRss
	}
	return 0
}

func (x *RedisMemoryInfo) GetUsedMemoryRssHuman() string {
	if x != nil {
		return x.UsedMemoryRssHuman
	}
	return ""
}

func (x *RedisMemoryInfo) GetUsedMemoryPeak() int64 {
	if x != nil {
		return x.UsedMemoryPeak
	}
	return 0
}

func (x *RedisMemoryInfo) GetUsedMemoryPeakHuman() string {
	if x != nil {
		return x.UsedMemoryPeakHuman
	}
	return ""
}

func (x *RedisMemoryInfo) GetUsedMemoryPeakPerc() string {
	if x != nil {
		return x.UsedMemoryPeakPerc
	}
	return ""
}

func (x *RedisMemoryInfo) GetUsedMemoryOverhead() int64 {
	if x != nil {
		return x.UsedMemoryOverhead
	}
	return 0
}

func (x *RedisMemoryInfo) GetUsedMemoryStartup() int64 {
	if x != nil {
		return x.UsedMemoryStartup
	}
	return 0
}

func (x *RedisMemoryInfo) GetUsedMemoryDataset() int64 {
	if x != nil {
		return x.UsedMemoryDataset
	}
	return 0
}

func (x *RedisMemoryInfo) GetUsedMemoryDatasetPerc() string {
	if x != nil {
		return x.UsedMemoryDatasetPerc
	}
	return ""
}

func (x *RedisMemoryInfo) GetAllocatorAllocated() int64 {
	if x != nil {
		return x.AllocatorAllocated
	}
	return 0
}

func (x *RedisMemoryInfo) GetAllocatorActive() int64 {
	if x != nil {
		return x.AllocatorActive
	}
	return 0
}

func (x *RedisMemoryInfo) GetAllocatorResident() int64 {
	if x != nil {
		return x.AllocatorResident
	}
	return 0
}

func (x *RedisMemoryInfo) GetTotalSystemMemory() int64 {
	if x != nil {
		return x.TotalSystemMemory
	}
	return 0
}

func (x *RedisMemoryInfo) GetTotalSystemMemoryHuman() string {
	if x != nil {
		return x.TotalSystemMemoryHuman
	}
	return ""
}

func (x *RedisMemoryInfo) GetUsedMemoryLua() int64 {
	if x != nil {
		return x.UsedMemoryLua
	}
	return 0
}

func (x *RedisMemoryInfo) GetUsedMemoryVmEval() int64 {
	if x != nil {
		return x.UsedMemoryVmEval
	}
	return 0
}

func (x *RedisMemoryInfo) GetUsedMemoryLuaHuman() string {
	if x != nil {
		return x.UsedMemoryLuaHuman
	}
	return ""
}

func (x *RedisMemoryInfo) GetUsedMemoryScriptsEval() int64 {
	if x != nil {
		return x.UsedMemoryScriptsEval
	}
	return 0
}

func (x *RedisMemoryInfo) GetNumberOfCachedScripts() int64 {
	if x != nil {
		return x.NumberOfCachedScripts
	}
	return 0
}

func (x *RedisMemoryInfo) GetNumberOfFunctions() int64 {
	if x != nil {
		return x.NumberOfFunctions
	}
	return 0
}

func (x *RedisMemoryInfo) GetNumberOfLibraries() int64 {
	if x != nil {
		return x.NumberOfLibraries
	}
	return 0
}

func (x *RedisMemoryInfo) GetUsedMemoryVmFunctions() int64 {
	if x != nil {
		return x.UsedMemoryVmFunctions
	}
	return 0
}

func (x *RedisMemoryInfo) GetUsedMemoryVmTotal() int64 {
	if x != nil {
		return x.UsedMemoryVmTotal
	}
	return 0
}

func (x *RedisMemoryInfo) GetUsedMemoryVmTotalHuman() string {
	if x != nil {
		return x.UsedMemoryVmTotalHuman
	}
	return ""
}

func (x *RedisMemoryInfo) GetUsedMemoryFunctions() int64 {
	if x != nil {
		return x.UsedMemoryFunctions
	}
	return 0
}

func (x *RedisMemoryInfo) GetUsedMemoryScripts() int64 {
	if x != nil {
		return x.UsedMemoryScripts
	}
	return 0
}

func (x *RedisMemoryInfo) GetUsedMemoryScriptsHuman() string {
	if x != nil {
		return x.UsedMemoryScriptsHuman
	}
	return ""
}

func (x *RedisMemoryInfo) GetMaxMemory() int64 {
	if x != nil {
		return x.MaxMemory
	}
	return 0
}

func (x *RedisMemoryInfo) GetMaxMemoryHuman() string {
	if x != nil {
		return x.MaxMemoryHuman
	}
	return ""
}

func (x *RedisMemoryInfo) GetMaxMemoryPolicy() string {
	if x != nil {
		return x.MaxMemoryPolicy
	}
	return ""
}

func (x *RedisMemoryInfo) GetAllocatorFragRatio() float64 {
	if x != nil {
		return x.AllocatorFragRatio
	}
	return 0
}

func (x *RedisMemoryInfo) GetAllocatorFragBytes() int64 {
	if x != nil {
		return x.AllocatorFragBytes
	}
	return 0
}

func (x *RedisMemoryInfo) GetAllocatorRssRatio() float64 {
	if x != nil {
		return x.AllocatorRssRatio
	}
	return 0
}

func (x *RedisMemoryInfo) GetAllocatorRssBytes() int64 {
	if x != nil {
		return x.AllocatorRssBytes
	}
	return 0
}

func (x *RedisMemoryInfo) GetRssOverheadRatio() float64 {
	if x != nil {
		return x.RssOverheadRatio
	}
	return 0
}

func (x *RedisMemoryInfo) GetRssOverheadBytes() int64 {
	if x != nil {
		return x.RssOverheadBytes
	}
	return 0
}

func (x *RedisMemoryInfo) GetMemFragmentationRatio() float64 {
	if x != nil {
		return x.MemFragmentationRatio
	}
	return 0
}

func (x *RedisMemoryInfo) GetMemFragmentationBytes() int64 {
	if x != nil {
		return x.MemFragmentationBytes
	}
	return 0
}

func (x *RedisMemoryInfo) GetMemNotCountedForEvict() int64 {
	if x != nil {
		return x.MemNotCountedForEvict
	}
	return 0
}

func (x *RedisMemoryInfo) GetMemReplicationBacklog() int64 {
	if x != nil {
		return x.MemReplicationBacklog
	}
	return 0
}

func (x *RedisMemoryInfo) GetMemTotalReplicationBuffers() int64 {
	if x != nil {
		return x.MemTotalReplicationBuffers
	}
	return 0
}

func (x *RedisMemoryInfo) GetMemClientsSlaves() int64 {
	if x != nil {
		return x.MemClientsSlaves
	}
	return 0
}

func (x *RedisMemoryInfo) GetMemClientsNormal() int64 {
	if x != nil {
		return x.MemClientsNormal
	}
	return 0
}

func (x *RedisMemoryInfo) GetMemClusterLinks() int64 {
	if x != nil {
		return x.MemClusterLinks
	}
	return 0
}

func (x *RedisMemoryInfo) GetMemAofBuffer() int64 {
	if x != nil {
		return x.MemAofBuffer
	}
	return 0
}

func (x *RedisMemoryInfo) GetMemAllocator() string {
	if x != nil {
		return x.MemAllocator
	}
	return ""
}

func (x *RedisMemoryInfo) GetActiveDefragRunning() int64 {
	if x != nil {
		return x.ActiveDefragRunning
	}
	return 0
}

func (x *RedisMemoryInfo) GetLazyFreePendingObjects() int64 {
	if x != nil {
		return x.LazyFreePendingObjects
	}
	return 0
}

func (x *RedisMemoryInfo) GetLazyFreedObjects() int64 {
	if x != nil {
		return x.LazyFreedObjects
	}
	return 0
}

var File_info_memory_proto protoreflect.FileDescriptor

var file_info_memory_proto_rawDesc = []byte{
	0x0a, 0x11, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x2e, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x22, 0xd7, 0x13, 0x0a, 0x0f, 0x52, 0x65, 0x64, 0x69, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x48, 0x75, 0x6d, 0x61,
	0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x72, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x64,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x73, 0x73, 0x5f, 0x68, 0x75, 0x6d,
	0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x52, 0x73, 0x73, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x10,
	0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x61, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x12, 0x33, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x75, 0x73, 0x65, 0x64,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x65, 0x61, 0x6b, 0x50, 0x65, 0x72, 0x63, 0x12, 0x30,
	0x0a, 0x14, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x75, 0x73,
	0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x75,
	0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70,
	0x12, 0x2e, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x75,
	0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x12, 0x37, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x50, 0x65, 0x72, 0x63, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x68, 0x75, 0x6d, 0x61,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12,
	0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c,
	0x75, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x75, 0x61, 0x12, 0x2d, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x76, 0x6d, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x56, 0x6d, 0x45, 0x76, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x75, 0x61, 0x5f, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x4c, 0x75, 0x61, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73,
	0x5f, 0x65, 0x76, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x75, 0x73, 0x65,
	0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x45, 0x76,
	0x61, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x76, 0x6d, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x75,
	0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x56, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x76, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x56, 0x6d,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x76, 0x6d, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x75,
	0x6d, 0x61, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x73, 0x65, 0x64, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x56, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x75, 0x6d, 0x61,
	0x6e, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x5f, 0x68, 0x75, 0x6d,
	0x61, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x75, 0x73, 0x65, 0x64, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x48, 0x75, 0x6d, 0x61, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x68, 0x75,
	0x6d, 0x61, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x46, 0x72,
	0x61, 0x67, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x46, 0x72, 0x61, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x73, 0x73, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x72, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x73, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x73, 0x73,
	0x5f, 0x6f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x72, 0x73, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65,
	0x61, 0x64, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x73, 0x73, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x73, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x65, 0x6d, 0x5f, 0x66, 0x72, 0x61,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x6d, 0x65, 0x6d, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x36, 0x0a,
	0x17, 0x6d, 0x65, 0x6d, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x6d, 0x65, 0x6d, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x6d, 0x65, 0x6d, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x65, 0x76, 0x69,
	0x63, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x6d, 0x65, 0x6d, 0x4e, 0x6f, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x45, 0x76, 0x69, 0x63, 0x74, 0x12,
	0x36, 0x0a, 0x17, 0x6d, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x15, 0x6d, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x12, 0x41, 0x0a, 0x1d, 0x6d, 0x65, 0x6d, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a,
	0x6d, 0x65, 0x6d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65,
	0x6d, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x73,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x6d, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x6e,
	0x6b, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x5f, 0x61, 0x6f, 0x66, 0x5f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x41,
	0x6f, 0x66, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x6d, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6d, 0x65, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a,
	0x15, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x72,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x31, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x66, 0x72, 0x61, 0x67, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x61, 0x7a, 0x79, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x6c, 0x61, 0x7a, 0x79, 0x46, 0x72, 0x65, 0x65, 0x50, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x6c, 0x61, 0x7a, 0x79, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x7a, 0x79, 0x46, 0x72,
	0x65, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x30, 0x5a, 0x08, 0x2e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0xaa, 0x02, 0x23, 0x49, 0x6e, 0x66, 0x6f, 0x47, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x48, 0x75, 0x62, 0x2e, 0x48, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_info_memory_proto_rawDescOnce sync.Once
	file_info_memory_proto_rawDescData = file_info_memory_proto_rawDesc
)

func file_info_memory_proto_rawDescGZIP() []byte {
	file_info_memory_proto_rawDescOnce.Do(func() {
		file_info_memory_proto_rawDescData = protoimpl.X.CompressGZIP(file_info_memory_proto_rawDescData)
	})
	return file_info_memory_proto_rawDescData
}

var file_info_memory_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_info_memory_proto_goTypes = []interface{}{
	(*RedisMemoryInfo)(nil), // 0: agnet.redis.RedisMemoryInfo
}
var file_info_memory_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_info_memory_proto_init() }
func file_info_memory_proto_init() {
	if File_info_memory_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_info_memory_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisMemoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_info_memory_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_info_memory_proto_goTypes,
		DependencyIndexes: file_info_memory_proto_depIdxs,
		MessageInfos:      file_info_memory_proto_msgTypes,
	}.Build()
	File_info_memory_proto = out.File
	file_info_memory_proto_rawDesc = nil
	file_info_memory_proto_goTypes = nil
	file_info_memory_proto_depIdxs = nil
}
