// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.12.4
// source: info_stat.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RedisStatsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalConnectionsReceived           int64   `protobuf:"varint,1,opt,name=total_connections_received,json=totalConnectionsReceived,proto3" json:"total_connections_received,omitempty"`
	TotalCommandsProcessed             int64   `protobuf:"varint,2,opt,name=total_commands_processed,json=totalCommandsProcessed,proto3" json:"total_commands_processed,omitempty"`
	InstantaneousOpsPerSec             int64   `protobuf:"varint,3,opt,name=instantaneous_ops_per_sec,json=instantaneousOpsPerSec,proto3" json:"instantaneous_ops_per_sec,omitempty"`
	TotalNetInputBytes                 int64   `protobuf:"varint,4,opt,name=total_net_input_bytes,json=totalNetInputBytes,proto3" json:"total_net_input_bytes,omitempty"`
	TotalNetOutputBytes                int64   `protobuf:"varint,5,opt,name=total_net_output_bytes,json=totalNetOutputBytes,proto3" json:"total_net_output_bytes,omitempty"`
	TotalNetReplInputBytes             int64   `protobuf:"varint,6,opt,name=total_net_repl_input_bytes,json=totalNetReplInputBytes,proto3" json:"total_net_repl_input_bytes,omitempty"`
	TotalNetReplOutputBytes            int64   `protobuf:"varint,7,opt,name=total_net_repl_output_bytes,json=totalNetReplOutputBytes,proto3" json:"total_net_repl_output_bytes,omitempty"`
	InstantaneousInputKbps             float64 `protobuf:"fixed64,8,opt,name=instantaneous_input_kbps,json=instantaneousInputKbps,proto3" json:"instantaneous_input_kbps,omitempty"`
	InstantaneousOutputKbps            float64 `protobuf:"fixed64,9,opt,name=instantaneous_output_kbps,json=instantaneousOutputKbps,proto3" json:"instantaneous_output_kbps,omitempty"`
	InstantaneousInputReplKbps         float64 `protobuf:"fixed64,10,opt,name=instantaneous_input_repl_kbps,json=instantaneousInputReplKbps,proto3" json:"instantaneous_input_repl_kbps,omitempty"`
	InstantaneousOutputReplKbps        float64 `protobuf:"fixed64,11,opt,name=instantaneous_output_repl_kbps,json=instantaneousOutputReplKbps,proto3" json:"instantaneous_output_repl_kbps,omitempty"`
	RejectedConnections                int64   `protobuf:"varint,12,opt,name=rejected_connections,json=rejectedConnections,proto3" json:"rejected_connections,omitempty"`
	SyncFull                           int64   `protobuf:"varint,13,opt,name=sync_full,json=syncFull,proto3" json:"sync_full,omitempty"`
	SyncPartialOk                      int64   `protobuf:"varint,14,opt,name=sync_partial_ok,json=syncPartialOk,proto3" json:"sync_partial_ok,omitempty"`
	SyncPartialErr                     int64   `protobuf:"varint,15,opt,name=sync_partial_err,json=syncPartialErr,proto3" json:"sync_partial_err,omitempty"`
	ExpiredKeys                        int64   `protobuf:"varint,16,opt,name=expired_keys,json=expiredKeys,proto3" json:"expired_keys,omitempty"`
	ExpiredStalePerc                   float64 `protobuf:"fixed64,17,opt,name=expired_stale_perc,json=expiredStalePerc,proto3" json:"expired_stale_perc,omitempty"`
	ExpiredTimeCapReachedCount         int64   `protobuf:"varint,18,opt,name=expired_time_cap_reached_count,json=expiredTimeCapReachedCount,proto3" json:"expired_time_cap_reached_count,omitempty"`
	ExpireCycleCpuMilliseconds         int64   `protobuf:"varint,19,opt,name=expire_cycle_cpu_milliseconds,json=expireCycleCpuMilliseconds,proto3" json:"expire_cycle_cpu_milliseconds,omitempty"`
	EvictedKeys                        int64   `protobuf:"varint,20,opt,name=evicted_keys,json=evictedKeys,proto3" json:"evicted_keys,omitempty"`
	EvictedClients                     int64   `protobuf:"varint,21,opt,name=evicted_clients,json=evictedClients,proto3" json:"evicted_clients,omitempty"`
	TotalEvictionExceededTime          int64   `protobuf:"varint,22,opt,name=total_eviction_exceeded_time,json=totalEvictionExceededTime,proto3" json:"total_eviction_exceeded_time,omitempty"`
	CurrentEvictionExceededTime        int64   `protobuf:"varint,23,opt,name=current_eviction_exceeded_time,json=currentEvictionExceededTime,proto3" json:"current_eviction_exceeded_time,omitempty"`
	KeyspaceHits                       int64   `protobuf:"varint,24,opt,name=keyspace_hits,json=keyspaceHits,proto3" json:"keyspace_hits,omitempty"`
	KeyspaceMisses                     int64   `protobuf:"varint,25,opt,name=keyspace_misses,json=keyspaceMisses,proto3" json:"keyspace_misses,omitempty"`
	PubsubChannels                     int64   `protobuf:"varint,26,opt,name=pubsub_channels,json=pubsubChannels,proto3" json:"pubsub_channels,omitempty"`
	PubsubPatterns                     int64   `protobuf:"varint,27,opt,name=pubsub_patterns,json=pubsubPatterns,proto3" json:"pubsub_patterns,omitempty"`
	PubsubShardChannels                int64   `protobuf:"varint,28,opt,name=pubsub_shard_channels,json=pubsubShardChannels,proto3" json:"pubsub_shard_channels,omitempty"`
	LatestForkUsec                     int64   `protobuf:"varint,29,opt,name=latest_fork_usec,json=latestForkUsec,proto3" json:"latest_fork_usec,omitempty"`
	TotalForks                         int64   `protobuf:"varint,30,opt,name=total_forks,json=totalForks,proto3" json:"total_forks,omitempty"`
	MigrateCachedSockets               int64   `protobuf:"varint,31,opt,name=migrate_cached_sockets,json=migrateCachedSockets,proto3" json:"migrate_cached_sockets,omitempty"`
	SlaveExpiresTrackedKeys            int64   `protobuf:"varint,32,opt,name=slave_expires_tracked_keys,json=slaveExpiresTrackedKeys,proto3" json:"slave_expires_tracked_keys,omitempty"`
	ActiveDefragHits                   int64   `protobuf:"varint,33,opt,name=active_defrag_hits,json=activeDefragHits,proto3" json:"active_defrag_hits,omitempty"`
	ActiveDefragMisses                 int64   `protobuf:"varint,34,opt,name=active_defrag_misses,json=activeDefragMisses,proto3" json:"active_defrag_misses,omitempty"`
	ActiveDefragKeyHits                int64   `protobuf:"varint,35,opt,name=active_defrag_key_hits,json=activeDefragKeyHits,proto3" json:"active_defrag_key_hits,omitempty"`
	ActiveDefragKeyMisses              int64   `protobuf:"varint,36,opt,name=active_defrag_key_misses,json=activeDefragKeyMisses,proto3" json:"active_defrag_key_misses,omitempty"`
	TotalActiveDefragTime              int64   `protobuf:"varint,37,opt,name=total_active_defrag_time,json=totalActiveDefragTime,proto3" json:"total_active_defrag_time,omitempty"`
	CurrentActiveDefragTime            int64   `protobuf:"varint,38,opt,name=current_active_defrag_time,json=currentActiveDefragTime,proto3" json:"current_active_defrag_time,omitempty"`
	TrackingTotalKeys                  int64   `protobuf:"varint,39,opt,name=tracking_total_keys,json=trackingTotalKeys,proto3" json:"tracking_total_keys,omitempty"`
	TrackingTotalItems                 int64   `protobuf:"varint,40,opt,name=tracking_total_items,json=trackingTotalItems,proto3" json:"tracking_total_items,omitempty"`
	TrackingTotalPrefixes              int64   `protobuf:"varint,41,opt,name=tracking_total_prefixes,json=trackingTotalPrefixes,proto3" json:"tracking_total_prefixes,omitempty"`
	UnexpectedErrorReplies             int64   `protobuf:"varint,42,opt,name=unexpected_error_replies,json=unexpectedErrorReplies,proto3" json:"unexpected_error_replies,omitempty"`
	TotalErrorReplies                  int64   `protobuf:"varint,43,opt,name=total_error_replies,json=totalErrorReplies,proto3" json:"total_error_replies,omitempty"`
	DumpPayloadSanitizations           int64   `protobuf:"varint,44,opt,name=dump_payload_sanitizations,json=dumpPayloadSanitizations,proto3" json:"dump_payload_sanitizations,omitempty"`
	TotalReadsProcessed                int64   `protobuf:"varint,45,opt,name=total_reads_processed,json=totalReadsProcessed,proto3" json:"total_reads_processed,omitempty"`
	TotalWritesProcessed               int64   `protobuf:"varint,46,opt,name=total_writes_processed,json=totalWritesProcessed,proto3" json:"total_writes_processed,omitempty"`
	IoThreadedReadsProcessed           int64   `protobuf:"varint,47,opt,name=io_threaded_reads_processed,json=ioThreadedReadsProcessed,proto3" json:"io_threaded_reads_processed,omitempty"`
	IoThreadedWritesProcessed          int64   `protobuf:"varint,48,opt,name=io_threaded_writes_processed,json=ioThreadedWritesProcessed,proto3" json:"io_threaded_writes_processed,omitempty"`
	ReplyBufferShrinks                 int64   `protobuf:"varint,49,opt,name=reply_buffer_shrinks,json=replyBufferShrinks,proto3" json:"reply_buffer_shrinks,omitempty"`
	ReplyBufferExpands                 int64   `protobuf:"varint,50,opt,name=reply_buffer_expands,json=replyBufferExpands,proto3" json:"reply_buffer_expands,omitempty"`
	EventloopCycles                    int64   `protobuf:"varint,51,opt,name=eventloop_cycles,json=eventloopCycles,proto3" json:"eventloop_cycles,omitempty"`
	EventloopDurationSum               int64   `protobuf:"varint,52,opt,name=eventloop_duration_sum,json=eventloopDurationSum,proto3" json:"eventloop_duration_sum,omitempty"`
	EventloopDurationCmdSum            int64   `protobuf:"varint,53,opt,name=eventloop_duration_cmd_sum,json=eventloopDurationCmdSum,proto3" json:"eventloop_duration_cmd_sum,omitempty"`
	InstantaneousEventloopCyclesPerSec int64   `protobuf:"varint,54,opt,name=instantaneous_eventloop_cycles_per_sec,json=instantaneousEventloopCyclesPerSec,proto3" json:"instantaneous_eventloop_cycles_per_sec,omitempty"`
	InstantaneousEventloopDurationUsec int64   `protobuf:"varint,55,opt,name=instantaneous_eventloop_duration_usec,json=instantaneousEventloopDurationUsec,proto3" json:"instantaneous_eventloop_duration_usec,omitempty"`
	AclAccessDeniedAuth                int64   `protobuf:"varint,56,opt,name=acl_access_denied_auth,json=aclAccessDeniedAuth,proto3" json:"acl_access_denied_auth,omitempty"`
	AclAccessDeniedCmd                 int64   `protobuf:"varint,57,opt,name=acl_access_denied_cmd,json=aclAccessDeniedCmd,proto3" json:"acl_access_denied_cmd,omitempty"`
	AclAccessDeniedKey                 int64   `protobuf:"varint,58,opt,name=acl_access_denied_key,json=aclAccessDeniedKey,proto3" json:"acl_access_denied_key,omitempty"`
	AclAccessDeniedChannel             int64   `protobuf:"varint,59,opt,name=acl_access_denied_channel,json=aclAccessDeniedChannel,proto3" json:"acl_access_denied_channel,omitempty"`
	UnixEpoch                          uint64  `protobuf:"varint,60,opt,name=unix_epoch,json=unixEpoch,proto3" json:"unix_epoch,omitempty"`
}

func (x *RedisStatsInfo) Reset() {
	*x = RedisStatsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_stat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisStatsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisStatsInfo) ProtoMessage() {}

func (x *RedisStatsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_info_stat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisStatsInfo.ProtoReflect.Descriptor instead.
func (*RedisStatsInfo) Descriptor() ([]byte, []int) {
	return file_info_stat_proto_rawDescGZIP(), []int{0}
}

func (x *RedisStatsInfo) GetTotalConnectionsReceived() int64 {
	if x != nil {
		return x.TotalConnectionsReceived
	}
	return 0
}

func (x *RedisStatsInfo) GetTotalCommandsProcessed() int64 {
	if x != nil {
		return x.TotalCommandsProcessed
	}
	return 0
}

func (x *RedisStatsInfo) GetInstantaneousOpsPerSec() int64 {
	if x != nil {
		return x.InstantaneousOpsPerSec
	}
	return 0
}

func (x *RedisStatsInfo) GetTotalNetInputBytes() int64 {
	if x != nil {
		return x.TotalNetInputBytes
	}
	return 0
}

func (x *RedisStatsInfo) GetTotalNetOutputBytes() int64 {
	if x != nil {
		return x.TotalNetOutputBytes
	}
	return 0
}

func (x *RedisStatsInfo) GetTotalNetReplInputBytes() int64 {
	if x != nil {
		return x.TotalNetReplInputBytes
	}
	return 0
}

func (x *RedisStatsInfo) GetTotalNetReplOutputBytes() int64 {
	if x != nil {
		return x.TotalNetReplOutputBytes
	}
	return 0
}

func (x *RedisStatsInfo) GetInstantaneousInputKbps() float64 {
	if x != nil {
		return x.InstantaneousInputKbps
	}
	return 0
}

func (x *RedisStatsInfo) GetInstantaneousOutputKbps() float64 {
	if x != nil {
		return x.InstantaneousOutputKbps
	}
	return 0
}

func (x *RedisStatsInfo) GetInstantaneousInputReplKbps() float64 {
	if x != nil {
		return x.InstantaneousInputReplKbps
	}
	return 0
}

func (x *RedisStatsInfo) GetInstantaneousOutputReplKbps() float64 {
	if x != nil {
		return x.InstantaneousOutputReplKbps
	}
	return 0
}

func (x *RedisStatsInfo) GetRejectedConnections() int64 {
	if x != nil {
		return x.RejectedConnections
	}
	return 0
}

func (x *RedisStatsInfo) GetSyncFull() int64 {
	if x != nil {
		return x.SyncFull
	}
	return 0
}

func (x *RedisStatsInfo) GetSyncPartialOk() int64 {
	if x != nil {
		return x.SyncPartialOk
	}
	return 0
}

func (x *RedisStatsInfo) GetSyncPartialErr() int64 {
	if x != nil {
		return x.SyncPartialErr
	}
	return 0
}

func (x *RedisStatsInfo) GetExpiredKeys() int64 {
	if x != nil {
		return x.ExpiredKeys
	}
	return 0
}

func (x *RedisStatsInfo) GetExpiredStalePerc() float64 {
	if x != nil {
		return x.ExpiredStalePerc
	}
	return 0
}

func (x *RedisStatsInfo) GetExpiredTimeCapReachedCount() int64 {
	if x != nil {
		return x.ExpiredTimeCapReachedCount
	}
	return 0
}

func (x *RedisStatsInfo) GetExpireCycleCpuMilliseconds() int64 {
	if x != nil {
		return x.ExpireCycleCpuMilliseconds
	}
	return 0
}

func (x *RedisStatsInfo) GetEvictedKeys() int64 {
	if x != nil {
		return x.EvictedKeys
	}
	return 0
}

func (x *RedisStatsInfo) GetEvictedClients() int64 {
	if x != nil {
		return x.EvictedClients
	}
	return 0
}

func (x *RedisStatsInfo) GetTotalEvictionExceededTime() int64 {
	if x != nil {
		return x.TotalEvictionExceededTime
	}
	return 0
}

func (x *RedisStatsInfo) GetCurrentEvictionExceededTime() int64 {
	if x != nil {
		return x.CurrentEvictionExceededTime
	}
	return 0
}

func (x *RedisStatsInfo) GetKeyspaceHits() int64 {
	if x != nil {
		return x.KeyspaceHits
	}
	return 0
}

func (x *RedisStatsInfo) GetKeyspaceMisses() int64 {
	if x != nil {
		return x.KeyspaceMisses
	}
	return 0
}

func (x *RedisStatsInfo) GetPubsubChannels() int64 {
	if x != nil {
		return x.PubsubChannels
	}
	return 0
}

func (x *RedisStatsInfo) GetPubsubPatterns() int64 {
	if x != nil {
		return x.PubsubPatterns
	}
	return 0
}

func (x *RedisStatsInfo) GetPubsubShardChannels() int64 {
	if x != nil {
		return x.PubsubShardChannels
	}
	return 0
}

func (x *RedisStatsInfo) GetLatestForkUsec() int64 {
	if x != nil {
		return x.LatestForkUsec
	}
	return 0
}

func (x *RedisStatsInfo) GetTotalForks() int64 {
	if x != nil {
		return x.TotalForks
	}
	return 0
}

func (x *RedisStatsInfo) GetMigrateCachedSockets() int64 {
	if x != nil {
		return x.MigrateCachedSockets
	}
	return 0
}

func (x *RedisStatsInfo) GetSlaveExpiresTrackedKeys() int64 {
	if x != nil {
		return x.SlaveExpiresTrackedKeys
	}
	return 0
}

func (x *RedisStatsInfo) GetActiveDefragHits() int64 {
	if x != nil {
		return x.ActiveDefragHits
	}
	return 0
}

func (x *RedisStatsInfo) GetActiveDefragMisses() int64 {
	if x != nil {
		return x.ActiveDefragMisses
	}
	return 0
}

func (x *RedisStatsInfo) GetActiveDefragKeyHits() int64 {
	if x != nil {
		return x.ActiveDefragKeyHits
	}
	return 0
}

func (x *RedisStatsInfo) GetActiveDefragKeyMisses() int64 {
	if x != nil {
		return x.ActiveDefragKeyMisses
	}
	return 0
}

func (x *RedisStatsInfo) GetTotalActiveDefragTime() int64 {
	if x != nil {
		return x.TotalActiveDefragTime
	}
	return 0
}

func (x *RedisStatsInfo) GetCurrentActiveDefragTime() int64 {
	if x != nil {
		return x.CurrentActiveDefragTime
	}
	return 0
}

func (x *RedisStatsInfo) GetTrackingTotalKeys() int64 {
	if x != nil {
		return x.TrackingTotalKeys
	}
	return 0
}

func (x *RedisStatsInfo) GetTrackingTotalItems() int64 {
	if x != nil {
		return x.TrackingTotalItems
	}
	return 0
}

func (x *RedisStatsInfo) GetTrackingTotalPrefixes() int64 {
	if x != nil {
		return x.TrackingTotalPrefixes
	}
	return 0
}

func (x *RedisStatsInfo) GetUnexpectedErrorReplies() int64 {
	if x != nil {
		return x.UnexpectedErrorReplies
	}
	return 0
}

func (x *RedisStatsInfo) GetTotalErrorReplies() int64 {
	if x != nil {
		return x.TotalErrorReplies
	}
	return 0
}

func (x *RedisStatsInfo) GetDumpPayloadSanitizations() int64 {
	if x != nil {
		return x.DumpPayloadSanitizations
	}
	return 0
}

func (x *RedisStatsInfo) GetTotalReadsProcessed() int64 {
	if x != nil {
		return x.TotalReadsProcessed
	}
	return 0
}

func (x *RedisStatsInfo) GetTotalWritesProcessed() int64 {
	if x != nil {
		return x.TotalWritesProcessed
	}
	return 0
}

func (x *RedisStatsInfo) GetIoThreadedReadsProcessed() int64 {
	if x != nil {
		return x.IoThreadedReadsProcessed
	}
	return 0
}

func (x *RedisStatsInfo) GetIoThreadedWritesProcessed() int64 {
	if x != nil {
		return x.IoThreadedWritesProcessed
	}
	return 0
}

func (x *RedisStatsInfo) GetReplyBufferShrinks() int64 {
	if x != nil {
		return x.ReplyBufferShrinks
	}
	return 0
}

func (x *RedisStatsInfo) GetReplyBufferExpands() int64 {
	if x != nil {
		return x.ReplyBufferExpands
	}
	return 0
}

func (x *RedisStatsInfo) GetEventloopCycles() int64 {
	if x != nil {
		return x.EventloopCycles
	}
	return 0
}

func (x *RedisStatsInfo) GetEventloopDurationSum() int64 {
	if x != nil {
		return x.EventloopDurationSum
	}
	return 0
}

func (x *RedisStatsInfo) GetEventloopDurationCmdSum() int64 {
	if x != nil {
		return x.EventloopDurationCmdSum
	}
	return 0
}

func (x *RedisStatsInfo) GetInstantaneousEventloopCyclesPerSec() int64 {
	if x != nil {
		return x.InstantaneousEventloopCyclesPerSec
	}
	return 0
}

func (x *RedisStatsInfo) GetInstantaneousEventloopDurationUsec() int64 {
	if x != nil {
		return x.InstantaneousEventloopDurationUsec
	}
	return 0
}

func (x *RedisStatsInfo) GetAclAccessDeniedAuth() int64 {
	if x != nil {
		return x.AclAccessDeniedAuth
	}
	return 0
}

func (x *RedisStatsInfo) GetAclAccessDeniedCmd() int64 {
	if x != nil {
		return x.AclAccessDeniedCmd
	}
	return 0
}

func (x *RedisStatsInfo) GetAclAccessDeniedKey() int64 {
	if x != nil {
		return x.AclAccessDeniedKey
	}
	return 0
}

func (x *RedisStatsInfo) GetAclAccessDeniedChannel() int64 {
	if x != nil {
		return x.AclAccessDeniedChannel
	}
	return 0
}

func (x *RedisStatsInfo) GetUnixEpoch() uint64 {
	if x != nil {
		return x.UnixEpoch
	}
	return 0
}

var File_info_stat_proto protoreflect.FileDescriptor

var file_info_stat_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0b, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x22, 0x8f,
	0x19, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3c, 0x0a, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x38, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x5f, 0x6f, 0x70, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x4f, 0x70, 0x73, 0x50, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65,
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x1a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6b, 0x62,
	0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4b, 0x62, 0x70, 0x73,
	0x12, 0x3a, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75,
	0x73, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x65, 0x6f,
	0x75, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4b, 0x62, 0x70, 0x73, 0x12, 0x41, 0x0a, 0x1d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x5f, 0x6b, 0x62, 0x70, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x1a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x65, 0x6f,
	0x75, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x4b, 0x62, 0x70, 0x73, 0x12,
	0x43, 0x0a, 0x1e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x5f, 0x6b, 0x62, 0x70,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x4b, 0x62, 0x70, 0x73, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63,
	0x46, 0x75, 0x6c, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6f, 0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73,
	0x79, 0x6e, 0x63, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4f, 0x6b, 0x12, 0x28, 0x0a, 0x10,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x79, 0x6e, 0x63, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x63, 0x12, 0x42, 0x0a, 0x1e, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x1a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x61, 0x70, 0x52,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x70, 0x75, 0x5f,
	0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x43,
	0x70, 0x75, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x76, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x76, 0x69, 0x63, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x76, 0x69, 0x63,
	0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x1e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x76, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x1b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x68, 0x69, 0x74,
	0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x48, 0x69, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x6b, 0x65, 0x79, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x13, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x53, 0x68, 0x61, 0x72, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x66,
	0x6f, 0x72, 0x6b, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6b, 0x55, 0x73, 0x65, 0x63, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x6b, 0x73, 0x12,
	0x34, 0x0a, 0x16, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x14, 0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x6c, 0x61, 0x76, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x73, 0x6c, 0x61, 0x76, 0x65,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x66,
	0x72, 0x61, 0x67, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x66, 0x72, 0x61, 0x67, 0x48, 0x69, 0x74, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x72, 0x61,
	0x67, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x66, 0x72, 0x61, 0x67, 0x4d, 0x69, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x66,
	0x72, 0x61, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x13, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x66, 0x72, 0x61, 0x67,
	0x4b, 0x65, 0x79, 0x48, 0x69, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x64, 0x65, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x69, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x65, 0x66, 0x72, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x72, 0x61, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44,
	0x65, 0x66, 0x72, 0x61, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x72,
	0x61, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x66, 0x72,
	0x61, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x65, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73,
	0x12, 0x38, 0x0a, 0x18, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x16, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65,
	0x73, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x75,
	0x6d, 0x70, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x61, 0x6e, 0x69, 0x74,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18,
	0x64, 0x75, 0x6d, 0x70, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x61, 0x6e, 0x69, 0x74,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x61, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6f, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x69, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6f, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x65, 0x64,
	0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x69, 0x6f, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x65, 0x64, 0x57, 0x72, 0x69, 0x74, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x73, 0x68, 0x72, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x68, 0x72,
	0x69, 0x6e, 0x6b, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x62, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6c,
	0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6c, 0x6f, 0x6f, 0x70, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x12, 0x3b, 0x0a, 0x1a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6d,
	0x64, 0x5f, 0x73, 0x75, 0x6d, 0x18, 0x35, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x6c, 0x6f, 0x6f, 0x70, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6d,
	0x64, 0x53, 0x75, 0x6d, 0x12, 0x52, 0x0a, 0x26, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x61,
	0x6e, 0x65, 0x6f, 0x75, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6c, 0x6f, 0x6f, 0x70, 0x5f,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x22, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x61, 0x6e, 0x65,
	0x6f, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x6c, 0x6f, 0x6f, 0x70, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x51, 0x0a, 0x25, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x6c,
	0x6f, 0x6f, 0x70, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65,
	0x63, 0x18, 0x37, 0x20, 0x01, 0x28, 0x03, 0x52, 0x22, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x61, 0x6e, 0x65, 0x6f, 0x75, 0x73, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x6c, 0x6f, 0x6f, 0x70, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x63, 0x12, 0x33, 0x0a, 0x16, 0x61,
	0x63, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x38, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x61, 0x63, 0x6c,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68,
	0x12, 0x31, 0x0a, 0x15, 0x61, 0x63, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64,
	0x65, 0x6e, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x61, 0x63, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64,
	0x43, 0x6d, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x63, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x3a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x61, 0x63, 0x6c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x6e,
	0x69, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x63, 0x6c, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x61, 0x63, 0x6c, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x78, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x78, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x42, 0x30, 0x5a, 0x08, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0xaa, 0x02, 0x23, 0x49,
	0x6e, 0x66, 0x6f, 0x47, 0x61, 0x74, 0x68, 0x65, 0x72, 0x48, 0x75, 0x62, 0x2e, 0x48, 0x75, 0x62,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_info_stat_proto_rawDescOnce sync.Once
	file_info_stat_proto_rawDescData = file_info_stat_proto_rawDesc
)

func file_info_stat_proto_rawDescGZIP() []byte {
	file_info_stat_proto_rawDescOnce.Do(func() {
		file_info_stat_proto_rawDescData = protoimpl.X.CompressGZIP(file_info_stat_proto_rawDescData)
	})
	return file_info_stat_proto_rawDescData
}

var file_info_stat_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_info_stat_proto_goTypes = []interface{}{
	(*RedisStatsInfo)(nil), // 0: agent.redis.RedisStatsInfo
}
var file_info_stat_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_info_stat_proto_init() }
func file_info_stat_proto_init() {
	if File_info_stat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_info_stat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisStatsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_info_stat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_info_stat_proto_goTypes,
		DependencyIndexes: file_info_stat_proto_depIdxs,
		MessageInfos:      file_info_stat_proto_msgTypes,
	}.Build()
	File_info_stat_proto = out.File
	file_info_stat_proto_rawDesc = nil
	file_info_stat_proto_goTypes = nil
	file_info_stat_proto_depIdxs = nil
}
